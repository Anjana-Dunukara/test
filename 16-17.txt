

************2015/2016*************





CREATE DATABASE Library;

-- Create the Books table
CREATE TABLE Library.Books (
    BookID INT PRIMARY KEY,
    Title VARCHAR(100),
    PurchasePrice DECIMAL(10, 2),
    HireFees DECIMAL(10, 2)
);

-- Create the Customer table
CREATE TABLE Library.Customer (
    CustomerID INT PRIMARY KEY,
    Cname VARCHAR(100),
    Gender VARCHAR(10),
    Delphos VARCHAR(50),
    Address VARCHAR(200)
);

-- Create the Copy table
CREATE TABLE Library.Copy (
    BookID INT,
    CopyID INT,
    Location VARCHAR(100),
    PRIMARY KEY (BookID, CopyID),
    FOREIGN KEY (BookID) REFERENCES Library.Books(BookID)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- Create the Borrowed table
CREATE TABLE Library.Borrowed (
    BookID INT,
    CopyID INT,
    CustomerID INT,
    StartDate DATE,
    Evaluation VARCHAR(100),
    PRIMARY KEY (BookID, CopyID, CustomerID),
    FOREIGN KEY (BookID, CopyID) REFERENCES Library.Copy(BookID, CopyID)
        ON DELETE CASCADE
        ON UPDATE CASCADE,
    FOREIGN KEY (CustomerID) REFERENCES Library.Customer(CustomerID)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

-- Insert data into the Books table
INSERT INTO Library.Books (BookID, Title, PurchasePrice, HireFees)
VALUES
    (1, 'Book 1', 19.99, 2.99),
    (2, 'Book 2', 29.99, 3.99),
    (3, 'Book 3', 24.99, 2.49);

-- Insert data into the Customer table
INSERT INTO Library.Customer (CustomerID, Cname, Gender, Delphos, Address)
VALUES
    (1, 'John Doe', 'Male', 'Delphos 1', '123 Main St'),
    (2, 'Jane Smith', 'Female', 'Delphos 2', '456 Elm St'),
    (3, 'Mike Johnson', 'Male', 'Delphos 3', '789 Oak St');

-- Insert data into the Copy table
INSERT INTO Library.Copy (BookID, CopyID, Location)
VALUES
    (1, 1, 'Shelf A1'),
    (1, 2, 'Shelf A2'),
    (2, 1, 'Shelf B1'),
    (2, 2, 'Shelf B2'),
    (3, 1, 'Shelf C1');

-- Insert data into the Borrowed table
INSERT INTO Library.Borrowed (BookID, CopyID, CustomerID, StartDate, Evaluation)
VALUES
    (1, 1, 1, '2023-07-01', 'Good'),
    (2, 1, 2, '2023-07-05', 'Excellent'),
    (3, 1, 3, '2023-07-10', 'Fair');


======================2=======================

i. Find details of all books stocked in London:

SELECT b.*
FROM Books b
JOIN Copy c ON b.BookID = c.BookID
WHERE c.Location = 'London';

ii. Find the book that has the most copies.

SELECT b.*
FROM Books b
JOIN (
    SELECT BookID, COUNT(*) AS CopyCount
    FROM Copy
    GROUP BY BookID
    ORDER BY CopyCount DESC
    LIMIT 1
) c ON b.BookID = c.BookID;


iii. Find the total number of borrowing of each book.

SELECT b.BookID, b.Title, COUNT(*) AS BorrowCount
FROM Books b
JOIN Borrowed br ON b.BookID = br.BookID
GROUP BY b.BookID, b.Title;



iv. Show details of the books with the total revenue that they each generate based on the
borrowing of copies of those books.

SELECT b.BookID, b.Title, COUNT(*) AS BorrowCount, SUM(b.HireFees) AS TotalRevenue
FROM Books b
JOIN Copy c ON b.BookID = c.BookID
JOIN Borrowed br ON c.BookID = br.BookID AND c.CopyID = br.CopyID
GROUP BY b.BookID, b.Title;


v. Show details of customer names and the titles of the books that they have borrowed

SELECT c.Cname, b.Title
FROM Customer c
JOIN Borrowed br ON c.CustomerID = br.CustomerID
JOIN Books b ON br.BookID = b.BookID;

vi. List all customers who have not borrowed any book from the location “York”.

SELECT c.*
FROM Customer c
LEFT JOIN Borrowed br ON c.CustomerID = br.CustomerID
LEFT JOIN Copy cp ON br.BookID = cp.BookID AND br.CopyID = cp.CopyID
WHERE cp.Location <> 'York' OR cp.Location IS NULL;

vii. Find the copies of books that have their number of hiring below the average borrowing
for copies of that book.

SELECT c.*
FROM Copy c
JOIN (
    SELECT BookID, AVG(COUNT(*)) AS AvgBorrowCount
    FROM Borrowed
    GROUP BY BookID
) b ON c.BookID = b.BookID
JOIN Borrowed br ON c.BookID = br.BookID AND c.CopyID = br.CopyID
GROUP BY c.BookID, c.CopyID
HAVING COUNT(*) < b.AvgBorrowCount;

viii. Find names of all female customers who have borrowed a book in 2012.

SELECT c.Cname
FROM Customer c
JOIN Borrowed br ON c.CustomerID = br.CustomerID
JOIN Books b ON br.BookID = b.BookID
WHERE c.Gender = 'Female' AND YEAR(br.StartDate) = 2012;


===================3=================================

i. List the title, purchase price of each book and compares the cost of the book to the
average cost i.e., shows the difference between the book cost and the average cost of
all books.

CREATE VIEW BookCostComparison AS
SELECT b.Title, b.PurchasePrice, b.PurchasePrice - AVG(b.PurchasePrice) OVER() AS CostDifference
FROM Books b;


ii. List the customer ID and name of every Customer along with the books that they have
borrowed within the past 200 days. Include starting date, ending date, and location
name for those borrowing. All customer details (ID and name) should be included in
the output, whether they have actually borrowed any books.

CREATE VIEW BorrowedBooksDetails AS
SELECT c.CustomerID, c.Cname, br.BookID, b.Title, br.StartDate, br.EndDate, c.Location
FROM Customer c
LEFT JOIN Borrowed br ON c.CustomerID = br.CustomerID
LEFT JOIN Copy cp ON br.BookID = cp.BookID AND br.CopyID = cp.CopyID
LEFT JOIN Books b ON cp.BookID = b.BookID
WHERE br.StartDate >= CURDATE() - INTERVAL 200 DAY OR br.StartDate IS NULL;

===================4==========================

Create triggers that enforce the following business rules :
i. Ensure that copies of books stored in London cannot be borrowed during December.

CREATE TRIGGER CheckBorrowingDuringDecember
BEFORE INSERT ON Borrowed
FOR EACH ROW
BEGIN
    IF EXISTS (
        SELECT 1
        FROM Copy c
        WHERE c.BookID = NEW.BookID
        AND c.Location = 'London'
        AND MONTH(NEW.StartDate) = 12
    ) THEN
        SIGNAL SQLSTATE '45000' -- Custom error code
        SET MESSAGE_TEXT = 'Cannot borrow copies stored in London during December.';
    END IF;
END;


ii. If a customer gives a zero evaluation, the details of their borrowing (customer name,
which book, the date of hiring, location of the copy and evaluation) must be placed in
an audit table.
Hint: You will need to construct an audit table with the appropriate columns of
correct data type.

CREATE TABLE AuditBorrowings (
    BorrowID INT,
    CustomerName VARCHAR(100),
    BookTitle VARCHAR(100),
    HiringDate DATE,
    CopyLocation VARCHAR(100),
    Evaluation VARCHAR(100)
);

CREATE TRIGGER LogZeroEvaluationBorrowing
AFTER UPDATE ON Borrowed
FOR EACH ROW
BEGIN
    IF NEW.Evaluation = '0' THEN
        INSERT INTO AuditBorrowings (BorrowID, CustomerName, BookTitle, HiringDate, CopyLocation, Evaluation)
        VALUES (NEW.BorrowID, (
                SELECT Cname
                FROM Customer
                WHERE CustomerID = NEW.CustomerID
            ), (
                SELECT Title
                FROM Books
                WHERE BookID = NEW.BookID
            ), NEW.StartDate, (
                SELECT Location
                FROM Copy
                WHERE BookID = NEW.BookID AND CopyID = NEW.CopyID
            ), NEW.Evaluation
        );
    END IF;
END;


iii. Ensure that records cannot be deleted from the “Borrowed” table if the “StartDate”
field value is earlier than the current date (System Date).

CREATE TRIGGER PreventDeletionIfStartDatePast
BEFORE DELETE ON Borrowed
FOR EACH ROW
BEGIN
    IF OLD.StartDate < CURDATE() THEN
        SIGNAL SQLSTATE '45000' -- Custom error code
        SET MESSAGE_TEXT = 'Cannot delete records with a StartDate earlier than the current date.';
    END IF;
END;
